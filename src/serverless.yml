service: todoList

provider:
  name: aws
  runtime: nodejs6.10
  profile: personal
  iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "logs:CreateLogGroup"
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "logs:CreateLogStream"
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "logs:PutLogEvents"
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "ec2:CreateNetworkInterface"
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "ec2:DescribeNetworkInterfaces"
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "ec2:DeleteNetworkInterface"
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: "*"

functions:
  create:
    handler: handler.create
    events:
      - http:
          path: items
          method: post
          integration: lambda-proxy
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date

  retrieve:
    handler: handler.retrieve
    events:
      - http:
          path: items
          method: get
          integration: lambda-proxy
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date

  retrieveOne:
    handler: handler.retrieveOne
    events:
      - http:
          path: items/{id}
          method: get
          integration: lambda-proxy
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date

  update:
    handler: handler.update
    events:
      - http:
          path: items/{id}
          method: put
          integration: lambda-proxy
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date

  remove:
    handler: handler.remove
    events:
      - http:
          path: items/{id}
          method: delete
          integration: lambda-proxy
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date